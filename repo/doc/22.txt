StartupPitchChallenge App Audit Report
Date: 2025-04-22

1. Codebase Overview
---------------------
• Expo-based React Native (Hermes engine) with expo-router for file-based routing.
• Organized under /app folder: auth screens, tabs (home, discover, balance).
• Global state via Zustand (useStore) and SupabaseProvider.
• UI using react-native-paper, react-native-svg, vector icons, and LinearGradient.

2. Supabase Integration
------------------------
• Uses anon/public key in .env for client; service role key should never be in client bundle.
• Authentication flows redirect correctly in _layout.tsx.
• Ensure environment variables are loaded before app start; consider validating keys at build time.
• Data fetching lacks retry/backoff; add error handling and loading states for edge cases.
• Consider row-level security (RLS) on Supabase tables to lock down unauthorized operations.

3. Deployment & Build
---------------------
• Web: uses Metro "static" output; ensure expo-router web entrypoint (tabs/index or layout) to avoid blank screen.
• iOS/Android: use EAS Build for custom dev client (AdMob requires this). Automate via CI (GitHub Actions + EAS CLI).
• Pin dependencies (resolutions/overrides) to avoid vulnerabilities; use dependabot or Renovate.
• Add Git hooks (lint, format, typecheck) to catch errors pre-commit.

4. AdMob Integration
---------------------
• Integrated expo-ads-admob for rewarded/interstitial ads.
• Test IDs used; production IDs must be swapped at release.
• Expo Go cannot render native modules; requires custom dev client or production release.
• iOS Podfile static frameworks hack needed for EXViewManager; validate Podfile.properties.json mapping.
• Recommendations:
  - Wrap all ad code with feature flag to disable in dev.
  - Add event listeners (rewardedListener, interstitialListener) to handle ad lifecycle.
  - Throttle ad frequency (e.g. one reward per minute, interstitial every N swipes).
  - Track metrics (impressions, clicks) with analytics.

5. In‑App Purchase & Bank Tab
-------------------------------
• Current implementation uses AdMobRewarded to grant free balance; not a true IAP.
• For real purchases, integrate expo-in-app-purchases or RevenueCat SDK:
  - Validate receipts server‑side.
  - Offer consumable/non-consumable products.
  - Handle purchase errors/cancellations.
• Ensure UI & flows handle purchase states (pending, success, failure).
• Protect against rapid taps and race conditions by disabling buttons during processing.

6. Performance & Optimization
------------------------------
• Home/SwipeScreen loads large arrays; use FlatList for virtualization instead of manual Animated + PanResponder.
• Memoize heavy values (startup lists, formatCurrency) with useMemo/useCallback.
• Avoid inline style objects; move into StyleSheet
• Offload image assets via react-native-fast-image or prefetch/caching.
• Enable Hermes and TurboModules for faster startup.
• Code‑split large files (SwipeScreen ~2000 lines) into smaller components.

7. Security & Best Practices
-----------------------------
• Do not include service_role_key in client. Use Supabase edge functions for sensitive operations.
• Secure transport (HTTPS) enforced by Expo defaults.
• Consider CSP and secure headers for web build.

8. Accessibility & UX
----------------------
• Add accessibilityLabel to interactive elements (buttons, icons).
• Ensure color contrast meets WCAG AA (gold button text on gold background may be low contrast).
• Keyboard navigation for web (tab index).

9. Testing & Monitoring
------------------------
• Unit tests (Jest) for utility functions and components.
• E2E tests (Detox or Cypress) for auth flows and purchases.
• Sentry or similar for crash/error reporting.
• Performance monitoring (Reactotron or Flipper).

Summary
-------
Overall architecture is solid but requires refinements in routing (web), production ad/IAP flows, robust error handling, and performance tuning. Implement suggested CI/CD, security hardening, and true in-app purchase integration for bank tab before release.
