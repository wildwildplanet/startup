# Project Overview: Startup Pitch Challenge

## App Workflow
- The app is a cross-platform (React Native/Expo) application for a startup pitch challenge, allowing users to browse startups, view details, invest with virtual currency, and track their portfolio and leaderboard position.
- User authentication is handled via Supabase Auth (JWT tokens). Users can sign up, log in, and their sessions are managed through Supabase.
- Core app screens include: authentication (login/signup), startup listing, startup detail, investment modal, portfolio, and leaderboard.
- The app fetches and updates data (startups, user profiles, investments, leaderboard) in real time from a Supabase PostgreSQL database.
- For development, mock data is available if Supabase is not connected.

## Tech Stack
- **Frontend:** React Native (Expo), TypeScript, Zustand (state management), React Navigation (expo-router), React Native Paper (UI components), Victory/Victory-Native (charts)
- **Backend:** Supabase (PostgreSQL DB, Auth, RESTful API via supabase-js client)
- **Other:** AsyncStorage (React Native), react-native-dotenv (env management), Expo modules (vector icons, splash screen, etc.)

## Supabase Integration
- Connection is managed in `lib/supabase/supabaseClient.ts` using `@supabase/supabase-js`.
- Supabase URL and Anon Key are loaded from environment variables (with defaults for dev/testing).
- Auth context is provided to the app via `lib/supabase/SupabaseProvider.tsx`.
- Core DB operations (fetching startups, user profiles, portfolios, investments, leaderboard) are abstracted in `supabaseClient.ts` and consumed via hooks and stores.
- Example Supabase URL: `https://fjhreuzbsbgbpmiqeuty.supabase.co`

## File Structure (Key Parts)
- `App.tsx` – App entry point, sets up providers and navigation
- `app/` – Main app screens and navigation layouts
  - `auth/` – Authentication screens
  - `startup/` – Startup detail screens
  - `tabs/` – Tab navigation (portfolio, leaderboard, etc.)
  - `modals/` – Modal screens (e.g., investment)
- `components/` – Reusable UI components (cards, investments, portfolio, etc.)
- `lib/`
  - `supabase/` – Supabase client, provider, and DB logic
  - `store/` – Zustand store for app state
- `scripts/` – Utility scripts for DB/debug
- `assets/` – Images, fonts, etc.
- `.env` – Environment variables (Supabase keys, etc.)
- `package.json` – Dependencies and scripts

## Notable Files
- `lib/supabase/supabaseClient.ts`: Initializes Supabase client, defines DB functions
- `lib/supabase/SupabaseProvider.tsx`: Auth/session context provider
- `lib/store/useStore.ts`: Zustand state management, integrates Supabase DB logic
- `app/index.tsx`: Main navigation entry
- `test-supabase.sh`: Script to test Supabase connection

## Additional Notes
- The app is designed for both mobile and web (Expo/React Native Web).
- Schema and sample data for the Supabase DB can be found in `schema.txt` and `user_profiles_rows.csv`.
- For more details on app flow, see `15appflow.txt`.
