import React, { useState, useEffect, useRef } from 'react';
import { 
  StyleSheet, 
  View, 
  Dimensions, 
  ActivityIndicator, 
  Animated, 
  PanResponder,
  ScrollView,
  StatusBar,
  Platform,
  FlatList,
  TouchableOpacity,
  Image
} from 'react-native';
import { Text, Button, useTheme, IconButton, Surface, Divider } from 'react-native-paper';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useRouter } from 'expo-router';
import { supabase } from '../../lib/supabase/supabaseClient';
import { LinearGradient } from 'expo-linear-gradient';
import { FontAwesome, MaterialCommunityIcons } from '@expo/vector-icons';
import InvestmentModal from '../../components/Investments/InvestmentModal';
import { useStore } from '../../lib/store/useStore';

// Get screen dimensions
const SCREEN_WIDTH = Dimensions.get('window').width;
const SCREEN_HEIGHT = Dimensions.get('window').height;

// Swipe threshold - card is considered swiped when moved beyond this distance
const SWIPE_THRESHOLD = SCREEN_WIDTH * 0.25;

// LinkedIn-inspired theme colors
const THEME = {
  primary: '#0A66C2', // LinkedIn blue
  secondary: '#1E2A3A', // Dark navy
  background: '#F3F2EF', // Light gray
  cardBackground: '#FFFFFF', // White
  cardContent: '#F5F1E8', // Light beige
  textDark: '#191919', // Almost black
  textLight: '#FFFFFF', // White
  textMedium: '#666666', // Medium gray
  error: '#E34D4D', // Red
  success: '#4CAF50', // Green
  border: '#E0E0E0', // Light gray border
  darkBg: '#1C2533', // Dark navy/black for card background
  cardSectionBg: '#F5F1E8', // Beige for card sections
  goldButton: '#D4AF37', // Gold color for button
  goldButtonText: '#000000', // Black text for gold button
};

// Format currency utility function
const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    notation: amount >= 1000000 ? 'compact' : 'standard',
    maximumFractionDigits: amount >= 1000000 ? 1 : 0,
  }).format(amount);
};

// Random country picker function for default values
const getRandomCountry = () => {
  const countries = ['us', 'uk', 'ca', 'sg', 'in'];
  return countries[Math.floor(Math.random() * countries.length)];
};

// Country flags
const countryFlags: Record<string, any> = {
  US: require('../../assets/images/country_png/us.png'),
  UK: require('../../assets/images/country_png/uk.png'),
  CA: require('../../assets/images/country_png/ca.png'),
  SG: require('../../assets/images/country_png/sg.png'),
  IN: require('../../assets/images/country_png/in.png'),
};

const getCountryFlagSource = (country: string | undefined): any => {
  if (!country) return countryFlags.US;
  const upperCountry = String(country).toUpperCase();
  return countryFlags[upperCountry as keyof typeof countryFlags] || countryFlags.US;
};

// Function to generate a realistic company logo URL based on the company name
const generateLogoUrl = (companyName: string) => {
  // Use UI Avatars service with improved parameters for better visibility
  // Adding size=200 and avoiding any encoding issues
  const name = companyName || 'Unknown';
  // Use a more direct approach for the UI Avatars URL with caching disabled
  return `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&background=4CAF50&color=fff&bold=true&size=200&format=png&cache=false`;
};

// Interface for startup data
interface Startup {
  id: string;
  name: string;
  logo: string;
  askamount: number;
  valuation: number;
  roi: number;
  problem: string;
  solution: string;
  fundinguse?: string;
  revenue?: string;
  growth?: string;
  team?: string;
  teamsize?: number;
  market?: string;
  traction?: string;
  risks?: string;
  stage: string;
  industry: string;
  risklevel: string;
  created_at?: string;
  tagline?: string;
  description?: string;
  market_size?: number;
  business_model?: string;
  go_to_market?: string;
  competition?: string;
  competitive_advantage?: string;
  exit_strategy?: string;
  team_background?: string;
  key_metrics?: string;
  milestones?: string;
  use_of_funds?: string;
  closing_hook?: string;
  funding_goal?: number;
  equity_offered?: number;
  location?: string;
  country?: string;
  founded_date?: string;
  team_size?: number;
  website?: string;
  current_revenue?: number;
  growth_rate?: number;
  margins?: number;
  pitch_video_url?: string;
  min_investment?: number;
  negotiation_willingness?: number;
  growth_rate_monthly?: number;
  current_status?: string;
  exit_multiplier?: number;
  exit_probability?: number;
  funding_allocation?: {
    product_development: number;
    marketing: number;
    operations: number;
  };
  financials?: {
    revenue: number;
    gross_margin: number;
    growth_rate: number;
  };
}

export default function SwipeScreen() {
  // --- Investment Simulation ---
  // Track the number of swipes to trigger simulation every 5 swipes
  const [swipeCount, setSwipeCount] = useState(0);

  const theme = useTheme();
  const router = useRouter();
  
  // Get user from store
  const user = useStore(state => state.user);
  const cashAvailable = user?.cashAvailable || 1000000; // Default to $1M if no user state
  
  // State variables
  const [startups, setStartups] = useState<Startup[]>([]);
  const [loading, setLoading] = useState(true);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [investModalVisible, setInvestModalVisible] = useState(false);
  const [currentStartup, setCurrentStartup] = useState<Startup | null>(null);
  
  // Animation values
  const position = useRef(new Animated.ValueXY()).current;
  const rotation = position.x.interpolate({
    inputRange: [-SCREEN_WIDTH / 2, 0, SCREEN_WIDTH / 2],
    outputRange: ['-10deg', '0deg', '10deg'],
    extrapolate: 'clamp',
  });
  
  // Button scale animations
  const likeScale = useRef(new Animated.Value(1)).current;
  const passScale = useRef(new Animated.Value(1)).current;
  
  // Opacity values for "INVEST" and "PASS" labels
  const likeOpacity = position.x.interpolate({
    inputRange: [0, SCREEN_WIDTH / 4],
    outputRange: [0, 1],
    extrapolate: 'clamp',
  });
  
  const nopeOpacity = position.x.interpolate({
    inputRange: [-SCREEN_WIDTH / 4, 0],
    outputRange: [1, 0],
    extrapolate: 'clamp',
  });

  // Pan responder for swipe gestures
  const panResponder = useRef(
    PanResponder.create({
      onStartShouldSetPanResponder: () => false, // Don't capture taps immediately
      onMoveShouldSetPanResponder: (evt, gestureState) => {
        // Only handle clear horizontal swipes, ignore small movements and vertical scrolling
        return Math.abs(gestureState.dx) > 20 && Math.abs(gestureState.dx) > Math.abs(gestureState.dy * 2);
      },
      onPanResponderMove: (_, gesture) => {
        position.setValue({ x: gesture.dx, y: 0 }); // Lock to horizontal axis
      },
      onPanResponderRelease: (_, gesture) => {
        console.log(`Pan gesture released: dx=${gesture.dx}, threshold=${SWIPE_THRESHOLD}`);
        
        // Swipe right (invest)
        if (gesture.dx > SWIPE_THRESHOLD) {
          console.log('Swipe right detected (invest)');
          swipeRight();
        } 
        // Swipe left (pass)
        else if (gesture.dx < -SWIPE_THRESHOLD) {
          console.log('Swipe left detected (pass)');
          swipeLeft();
        } 
        // Return to center
        else {
          console.log('No clear swipe detected, returning to center');
          Animated.spring(position, {
            toValue: { x: 0, y: 0 },
            friction: 5,
            useNativeDriver: false,
          }).start();
        }
      },
    })
  ).current;

  // Fetch startups from Supabase and add mock data for new fields
  const fetchStartups = async () => {
    setLoading(true);

    try {
      // Explicitly log the query we're about to make
      console.log('Fetching startups from Supabase...');
      
      const { data, error, count } = await supabase
        .from('startups')
        .select('*', { count: 'exact' })
        .order('created_at', { ascending: false });
      
      if (error) {
        console.error('Error fetching startups:', error);
        return;
      }
      
      // Log the count and raw data for debugging
      console.log(`Fetched ${data?.length || 0} startups out of ${count} total`);
      
      if (!data || data.length === 0) {
        console.warn('No startups found in the database');
        return;
      }
      
      // Randomize the order of startups for variety
      const shuffledData = [...data].sort(() => Math.random() - 0.5);
      console.log('Shuffled startup data for variety');
      
      // Map through all fields to ensure we're using all available data
      const enhancedData = shuffledData.map(startup => {
        // Log each startup's logo URL for debugging
        console.log(`Startup: ${startup.name}, Logo URL: ${startup.logo}`);
        
        return {
          id: startup.id,
          name: startup.name || 'Unnamed Startup',
          // Improved logo handling
          logo: (startup.logo && startup.logo.trim().length > 0 && 
                !startup.logo.includes('undefined') && 
                !startup.logo.includes('null')) 
            ? startup.logo 
            : generateLogoUrl(startup.name || 'Unnamed Startup'),
          askamount: startup.askamount || 500000,
          valuation: startup.valuation || 5000000,
          roi: startup.roi || 30,
          problem: startup.problem || 'No problem statement provided',
          solution: startup.solution || 'No solution description provided',
          stage: startup.stage || 'Seed',
          industry: startup.industry || 'Technology',
          risklevel: startup.risklevel || 'Medium',
          
          // All other fields
          created_at: startup.created_at,
          tagline: startup.tagline || '',
          description: startup.description || '',
          market: startup.market || '',
          market_size: startup.market_size || 0,
          traction: startup.traction || '',
          team: startup.team || '',
          teamsize: startup.teamsize || 3,
          fundinguse: startup.fundinguse || '',
          revenue: startup.revenue || '',
          growth: startup.growth || '',
          risks: startup.risks || '',
          team_background: startup.team_background || '',
          key_metrics: startup.key_metrics || '',
          business_model: startup.business_model || '',
          go_to_market: startup.go_to_market || '',
          competitive_advantage: startup.competitive_advantage || '',
          competition: startup.competition || '',
          exit_strategy: startup.exit_strategy || '',
          milestones: startup.milestones || '',
          use_of_funds: startup.use_of_funds || '',
          closing_hook: startup.closing_hook || '',
          funding_goal: startup.funding_goal || 0,
          equity_offered: startup.equity_offered || 0,
          location: startup.location || '',
          country: startup.country || getRandomCountry(),
          founded_date: startup.founded_date || '',
          team_size: startup.team_size || startup.teamsize || 3,
          website: startup.website || '',
          current_revenue: startup.current_revenue || 0,
          growth_rate: startup.growth_rate || 0,
          margins: startup.margins || 0,
          pitch_video_url: startup.pitch_video_url || '',
          min_investment: startup.min_investment || 0,
          negotiation_willingness: startup.negotiation_willingness || 0,
          growth_rate_monthly: startup.growth_rate_monthly || 0,
          current_status: startup.current_status || '',
          exit_multiplier: startup.exit_multiplier || 0,
          exit_probability: startup.exit_probability || 0,
          
          // Handle nested objects that might be stored as JSON strings
          funding_allocation: typeof startup.funding_allocation === 'string' 
            ? JSON.parse(startup.funding_allocation)
            : startup.funding_allocation || {
                product_development: 55,
                marketing: 30,
                operations: 15
              },
          
          financials: typeof startup.financials === 'string'
            ? JSON.parse(startup.financials)
            : startup.financials || {
                revenue: startup.current_revenue || 1200000,
                gross_margin: startup.margins || 35,
                growth_rate: startup.growth_rate_monthly || 4,
              }
        };
      });
      
      console.log(`Enhanced ${enhancedData.length} startups with complete data`);
      console.log('First few startup IDs:', enhancedData.slice(0, 3).map(s => s.id).join(', '));
      
      // Update state in the correct sequence: first set startups, then reset index, then set current startup
      setStartups(enhancedData);
      setCurrentIndex(0);
      
      // Reset loading state
      setLoading(false);
      
      // Set the current startup to the first one AFTER state updates
      if (enhancedData.length > 0) {
        setCurrentStartup(enhancedData[0]);
        console.log(`Setting current startup to first one: ${enhancedData[0].name} (ID: ${enhancedData[0].id})`);
      }
    } catch (err) {
      console.error('Unexpected error fetching startups:', err);
      setLoading(false);
    }
  };

  // Load startups on initial mount
  useEffect(() => {
    fetchStartups();
  }, []);

  // Handle swipe right (invest)
  const swipeRight = () => {
    Animated.timing(likeScale, {
      toValue: 1.2,
      duration: 200,
      useNativeDriver: true,
    }).start(() => {
      Animated.timing(likeScale, {
        toValue: 1,
        duration: 100,
        useNativeDriver: true,
      }).start();
    });

    animateOutRight();
  };

  // Handle swipe left (pass)
  const swipeLeft = () => {
    Animated.timing(passScale, {
      toValue: 1.2,
      duration: 200,
      useNativeDriver: true,
    }).start(() => {
      Animated.timing(passScale, {
        toValue: 1,
        duration: 100,
        useNativeDriver: true,
      }).start();
    });

    animateOutLeft();
  };

  // Animate card out to the right
  const animateOutRight = () => {
    Animated.timing(position, {
      toValue: { x: SCREEN_WIDTH + 100, y: 0 },
      duration: 200,
      useNativeDriver: false,
    }).start(() => {
      console.log('Right animation completed, calling nextCard');
      nextCard(true);
    });
  };

  // Animate card out to the left
  const animateOutLeft = () => {
    Animated.timing(position, {
      toValue: { x: -SCREEN_WIDTH - 100, y: 0 },
      duration: 200,
      useNativeDriver: false,
    }).start(() => {
      console.log('Left animation completed, calling nextCard');
      nextCard(false);
    });
  };

  // Move to the next card
  const nextCard = (invested: boolean) => {
    // Increment swipe count and trigger simulation every 5 swipes
    setSwipeCount(prev => {
      const newCount = prev + 1;
      if (newCount % 5 === 0) {
        simulateInvestmentValues();
      }
      return newCount;
    });

    // Debug logging to track startup changes
    console.log(`Current card index: ${currentIndex} of ${startups.length}`);
    
    if (invested && currentStartup) {
      // If invested, open the investment modal
      setInvestModalVisible(true);
    }

    const newIndex = currentIndex + 1;
    
    // More detailed logging to track the transition
    console.log(`Moving from startup "${currentStartup?.name}" to "${startups[newIndex]?.name}"`);
    console.log(`Moving from card ${currentIndex} to ${newIndex} out of ${startups.length} total`);
    
    // Reset position
    position.setValue({ x: 0, y: 0 });
    
    // Update index and current startup IMMEDIATELY to ensure UI updates
    if (newIndex < startups.length) {
      setCurrentIndex(newIndex);
      setCurrentStartup(startups[newIndex]);
      console.log(`Set current startup to: ${startups[newIndex]?.name} (ID: ${startups[newIndex]?.id})`);
    } else {
      // Reload cards when we run out - and explicitly reset index to 0
      console.log('Ran out of cards, fetching new startups...');
      fetchStartups();
      setCurrentIndex(0);
      // Explicitly set the first startup after fetching
      if (startups.length > 0) {
        setCurrentStartup(startups[0]);
        console.log(`Reset to first startup: ${startups[0]?.name}`);
      }
    }
  };

  // --- Investment Simulation Placeholder ---
// This function will update investment values based on simulation logic
const simulateInvestmentValues = () => {
  // Call the global simulation logic to update investments
  useStore.getState().simulateMarket();
  console.log('[Simulation] Investment values updated via simulateMarket');
};

// Get risk level color for styling
  const getRiskLevelColor = (riskLevel: string): readonly [string, string] => {
    switch (riskLevel?.toLowerCase() || 'medium') {
      case 'high':
        return [THEME.error, '#FF7676'] as const;
      case 'medium':
        return ['#FFA726', '#FFCC80'] as const;
      case 'low':
        return [THEME.success, '#A5D6A7'] as const;
      default:
        return ['#90CAF9', '#BBDEFB'] as const;
    }
  };

  // Get stage color for badge styling
  const getStageColor = (stage: string) => {
    switch (stage?.toLowerCase() || 'seed') {
      case 'seed':
        return '#8BC34A';
      case 'series a':
        return THEME.primary;
      case 'series b':
        return '#FF7043';
      case 'series c':
        return '#9575CD';
      default:
        return '#78909C';
    }
  };

  // Handle tapping a startup card to view details
  const handleStartupPress = (startup: Startup) => {
    router.push(`/startup/${startup.id}`);
  };

  // Render loading indicator
  if (loading) {
    return (
      <SafeAreaView style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={THEME.primary} />
        <Text style={[styles.loadingText, { color: THEME.textMedium }]}>Finding startups...</Text>
      </SafeAreaView>
    );
  }

  // Render empty state if no startups
  if (startups.length === 0) {
    return (
      <SafeAreaView style={styles.emptyContainer}>
        <Text variant="headlineSmall" style={{ color: THEME.textDark }}>No startups available</Text>
        <Text variant="bodyMedium" style={styles.emptyText}>
          Check back later for new startup pitches
        </Text>
        <Button 
          mode="contained"
          onPress={fetchStartups}
          style={{ marginTop: 24, backgroundColor: THEME.primary }}
          labelStyle={{ color: THEME.textLight }}
        >
          Refresh
        </Button>
      </SafeAreaView>
    );
  }

  // Current startup card data
  const currentStartupData = startups[currentIndex];

  return (
    <SafeAreaView style={styles.container} edges={['right', 'left', 'top', 'bottom']}>
      <StatusBar barStyle="dark-content" backgroundColor="#FFFFFF" />
      
      {/* Card Container */}
      <View style={styles.cardContainer}>
        {/* Current card */}
        {currentStartupData && (
          <Animated.View
            style={[
              styles.card,
              {
                transform: [
                  { translateX: position.x },
                  { rotate: rotation },
                ],
              },
            ]}
          >
            {/* "INVEST" overlay */}
            <Animated.View
              style={[
                styles.investOverlay,
                { opacity: likeOpacity },
              ]}
            >
              <Text style={styles.overlayText}>INVEST</Text>
            </Animated.View>
            
            {/* "PASS" overlay */}
            <Animated.View
              style={[
                styles.passOverlay,
                { opacity: nopeOpacity },
              ]}
            >
              <Text style={styles.overlayText}>PASS</Text>
            </Animated.View>
            
            {/* Card Header - Fixed, not part of scroll */}
            <View style={styles.cardTopSection}>
              <View style={styles.headerTopRow}>
                <View style={styles.appTitleContainer}>
                  <Text style={styles.appTitle}>Balance</Text>
                  <View style={styles.balanceChip}>
                    <FontAwesome name="dollar" size={16} color="#000" />
                    <Text style={styles.balanceText}>
                      {new Intl.NumberFormat('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        maximumFractionDigits: 1,
                        notation: 'compact',
                      }).format(cashAvailable)}
                    </Text>
                  </View>
                </View>
              </View>
              <View style={styles.titleDivider} />
              
              <View style={styles.companyHeaderRow}>
                {/* Company logo moved to the left side */}
                <View style={styles.companyLogoContainer}>
                  {currentStartupData.logo ? (
                    <Image 
                      source={{ uri: currentStartupData.logo }} 
                      style={styles.companyLogo}
                      resizeMode="cover"
                      onError={(e) => {
                        console.error(`Logo load error for ${currentStartupData.name}:`, e.nativeEvent.error);
                        // We can't directly update the state here, but we can log it for debugging
                      }}
                    />
                  ) : (
                    <View style={styles.defaultLogoContainer}>
                      <Text style={styles.defaultLogoText}>
                        {(currentStartupData.name || '').slice(0, 2).toUpperCase()}
                      </Text>
                    </View>
                  )}
                </View>
                
                <View style={styles.companyNameContainer}>
                  <View style={styles.companyNameRow}>
                    <Text style={styles.cardCompanyName} numberOfLines={2} ellipsizeMode="tail">
                      {currentStartupData.name}
                    </Text>
                    
                    {/* Add risk level badge immediately after company name */}
                    <View style={[styles.riskBadgeSmall, {backgroundColor: getRiskLevelColor(currentStartupData.risklevel)[0]}]}>
                      <FontAwesome name="exclamation-triangle" size={12} color="#fff" />
                      <Text style={styles.riskBadgeSmallText}>{currentStartupData.risklevel}</Text>
                    </View>
                  </View>
                  
                  {/* Industry badge moved next to company name */}
                  <View style={styles.industryBadge}>
                    <FontAwesome name="industry" size={16} color="#fff" />
                    <Text style={styles.industryBadgeText}>{currentStartupData.industry}</Text>
                  </View>
                </View>
              </View>
              
              {/* Badges container now has country flag first */}
              <View style={styles.badgesContainer}>
                {/* Country flag badge */}
                <View style={styles.countryContainer}>
                  <Image
                    source={getCountryFlagSource(currentStartupData.country)}
                    style={styles.countryFlag}
                    resizeMode="contain"
                  />
                  <Text style={styles.country}>{currentStartupData.country || 'Unknown'}</Text>
                </View>
                
                <View style={[styles.stageBadge, { backgroundColor: getStageColor(currentStartupData.stage) }]}>
                  <Text style={styles.badgeText}>{currentStartupData.stage}</Text>
                </View>
                
                <View style={styles.riskBadge}>
                  <Text style={styles.badgeText}>{currentStartupData.risklevel}</Text>
                </View>
              </View>
              
              <View style={styles.valuationRow}>
                <Text style={styles.financialText}>
                  Ask: {formatCurrency(currentStartupData.askamount)} at {Math.round((currentStartupData.askamount / currentStartupData.valuation) * 100)}% Equity
                </Text>
              </View>
              
              {/* Offer row with ROI moved next to button */}
              <View style={styles.offerRow}>
                <Text style={styles.roiText}>
                  +{currentStartupData.roi}% ROI
                </Text>
                
                {/* Make Offer Button */}
                <TouchableOpacity
                  style={styles.makeOfferButton}
                  onPress={() => setInvestModalVisible(true)}
                  activeOpacity={0.8}
                >
                  <Text style={styles.makeOfferText}>MAKE OFFER</Text>
                </TouchableOpacity>
              </View>
            </View>
            
            {/* Main scrollable content area - with PitchCard-like style */}
            <View {...panResponder.panHandlers} style={styles.scrollableArea}>
              <ScrollView 
                showsVerticalScrollIndicator={true}
                style={styles.scrollContent}
                contentContainerStyle={styles.scrollContentContainer}
                scrollEventThrottle={16}
                decelerationRate="normal"
                bounces={true}
              >
                {/* About Section moved to be first */}
                {currentStartupData.description && (
                  <View style={styles.pitchSection}>
                    <View style={styles.pitchSectionHeader}>
                      <FontAwesome name="file-text" size={22} color="#000" />
                      <Text style={styles.pitchSectionTitle}>About</Text>
                    </View>
                    
                    <Text style={styles.pitchSectionText}>
                      {currentStartupData.description}
                    </Text>
                  </View>
                )}

                {/* Problem & Solution Sections Side by Side */}
                <View style={styles.sectionRow}>
                  <View style={styles.sectionHalf}>
                    <View style={[styles.pitchSection, {flex: 1}]}>
                      <View style={styles.pitchSectionHeader}>
                        <FontAwesome name="lightbulb-o" size={22} color="#000" />
                        <Text style={styles.pitchSectionTitle}>Problem</Text>
                      </View>
                      <Text style={styles.pitchSectionText}>
                        {currentStartupData.problem || "Setting up automated workflows is complex and time-consuming, requiring extensive expertise."}
                      </Text>
                    </View>
                  </View>
                  
                  <View style={styles.sectionHalf}>
                    <View style={[styles.pitchSection, {flex: 1}]}>
                      <View style={styles.pitchSectionHeader}>
                        <FontAwesome name="wrench" size={22} color="#000" />
                        <Text style={styles.pitchSectionTitle}>Solution</Text>
                      </View>
                      <Text style={styles.pitchSectionText}>
                        {currentStartupData.solution || "No-code platform to create automated solutions with ease"}
                      </Text>
                    </View>
                  </View>
                </View>

                {/* Company Details Section */}
                <View style={styles.pitchSection}>
                  <View style={styles.pitchSectionHeader}>
                    <FontAwesome name="building-o" size={22} color={THEME.textDark} />
                    <Text style={styles.pitchSectionTitle}>Company Details</Text>
                  </View>
                  
                  <View style={styles.detailsGrid}>
                    {currentStartupData.location && (
                      <View style={styles.detailItem}>
                        <FontAwesome name="map-marker" size={16} color={THEME.textDark} />
                        <Text style={styles.detailText}>{currentStartupData.location}</Text>
                      </View>
                    )}
                    
                    {currentStartupData.founded_date && (
                      <View style={styles.detailItem}>
                        <FontAwesome name="calendar" size={16} color={THEME.textDark} />
                        <Text style={styles.detailText}>
                          Founded: {new Date(currentStartupData.founded_date).getFullYear()}
                        </Text>
                      </View>
                    )}
                    
                    {currentStartupData.website && (
                      <View style={styles.detailItem}>
                        <FontAwesome name="globe" size={16} color={THEME.textDark} />
                        <Text style={styles.detailText}>{currentStartupData.website}</Text>
                      </View>
                    )}
                    
                    {currentStartupData.current_status && (
                      <View style={styles.detailItem}>
                        <FontAwesome name="info-circle" size={16} color={THEME.textDark} />
                        <Text style={styles.detailText}>Status: {currentStartupData.current_status}</Text>
                      </View>
                    )}

                    {currentStartupData.team_size && (
                      <View style={styles.detailItem}>
                        <FontAwesome name="users" size={16} color={THEME.textDark} />
                        <Text style={styles.detailText}>Team: {currentStartupData.team_size} members</Text>
                      </View>
                    )}
                  </View>
                </View>

                {/* Market Opportunity Section with Visualization */}
                <View style={styles.pitchSection}>
                  <View style={styles.pitchSectionHeader}>
                    <FontAwesome name="line-chart" size={22} color="#000" />
                    <Text style={styles.pitchSectionTitle}>Market Opportunity</Text>
                  </View>
                  <Text style={styles.pitchSectionText}>
                    {currentStartupData.market || "Large addressable market with strong growth potential."}
                  </Text>
                  
                  {/* Market Size Visualization */}
                  {currentStartupData.market_size && currentStartupData.market_size > 0 && (
                    <View style={styles.marketSizeVisualization}>
                      <Text style={styles.visualizationTitle}>Total Addressable Market</Text>
                      <Text style={styles.marketSizeValue}>{formatCurrency(currentStartupData.market_size)}</Text>
                      
                      <View style={styles.marketSizeProgressBar}>
                        <LinearGradient
                          colors={['#0A66C2', '#4FC3F7']}
                          start={{ x: 0, y: 0 }}
                          end={{ x: 1, y: 0 }}
                          style={[styles.marketSizeProgress, {width: `${Math.min((currentStartupData.market_size/10000000000) * 100, 100)}%`}]}
                        />
                      </View>
                      <View style={styles.progressBarLabels}>
                        <Text style={styles.progressBarLabel}>$0</Text>
                        <Text style={styles.progressBarLabel}>$10B+</Text>
                      </View>
                    </View>
                  )}
                </View>
                
                {/* Traction Section with Metrics */}
                <View style={styles.pitchSection}>
                  <View style={styles.pitchSectionHeader}>
                    <FontAwesome name="rocket" size={22} color="#000" />
                    <Text style={styles.pitchSectionTitle}>Traction</Text>
                  </View>
                  <Text style={styles.pitchSectionText}>
                    {currentStartupData.traction || "Early customer validation with strong user engagement."}
                  </Text>
                  
                  {/* Key Metrics with Bar Chart */}
                  <View style={styles.metricsVisual}>
                    <View style={styles.barChart}>
                      <View style={styles.barChartColumn}>
                        <View style={styles.barChartBar}>
                          <LinearGradient
                            colors={['#4CAF50', '#8BC34A']}
                            style={[styles.barChartFill, {height: `${Math.min((currentStartupData.financials?.revenue || 1200000) / 3000000 * 100, 100)}%`}]}
                          />
                        </View>
                        <Text style={styles.barChartLabel}>Revenue</Text>
                        <Text style={styles.barChartValue}>{formatCurrency(currentStartupData.financials?.revenue || 1200000)}</Text>
                      </View>
                      
                      <View style={styles.barChartColumn}>
                        <View style={styles.barChartBar}>
                          <LinearGradient
                            colors={['#FF9800', '#FFB74D']}
                            style={[styles.barChartFill, {height: `${currentStartupData.financials?.gross_margin || 35}%`}]}
                          />
                        </View>
                        <Text style={styles.barChartLabel}>Margin</Text>
                        <Text style={styles.barChartValue}>{currentStartupData.financials?.gross_margin || 35}%</Text>
                      </View>
                      
                      <View style={styles.barChartColumn}>
                        <View style={styles.barChartBar}>
                          <LinearGradient
                            colors={['#9C27B0', '#CE93D8']}
                            style={[styles.barChartFill, {height: `${(currentStartupData.financials?.growth_rate || 4) * 10}%`}]}
                          />
                        </View>
                        <Text style={styles.barChartLabel}>Growth</Text>
                        <Text style={styles.barChartValue}>{currentStartupData.financials?.growth_rate || 4}%/mo</Text>
                      </View>
                    </View>
                  </View>
                  
                  {currentStartupData.key_metrics && (
                    <View style={styles.keyMetrics}>
                      <Text style={styles.keyMetricsTitle}>Key Metrics</Text>
                      <Text style={styles.pitchSectionText}>{currentStartupData.key_metrics}</Text>
                    </View>
                  )}
                </View>
                
                {/* Team Section */}
                {currentStartupData.team && (
                  <View style={styles.pitchSection}>
                    <View style={styles.pitchSectionHeader}>
                      <FontAwesome name="users" size={22} color="#000" />
                      <Text style={styles.pitchSectionTitle}>Team</Text>
                    </View>
                    <Text style={styles.pitchSectionText}>
                      {currentStartupData.team}
                    </Text>
                    
                    {currentStartupData.team_background && (
                      <View style={styles.teamBackgroundContainer}>
                        <Text style={styles.teamBackgroundTitle}>Background</Text>
                        <Text style={styles.pitchSectionText}>{currentStartupData.team_background}</Text>
                      </View>
                    )}
                  </View>
                )}

                {/* Competition Section */}
                {(currentStartupData.competition || currentStartupData.competitive_advantage) && (
                  <View style={styles.pitchSection}>
                    <View style={styles.pitchSectionHeader}>
                      <FontAwesome name="crosshairs" size={22} color="#000" />
                      <Text style={styles.pitchSectionTitle}>Competition</Text>
                    </View>
                    
                    {currentStartupData.competition && (
                      <Text style={styles.pitchSectionText}>
                        {currentStartupData.competition}
                      </Text>
                    )}
                    
                    {currentStartupData.competitive_advantage && (
                      <View style={styles.advantageContainer}>
                        <View style={styles.sectionSubheader}>
                          <FontAwesome name="trophy" size={18} color="#0A66C2" />
                          <Text style={styles.advantageTitle}>Our Advantage</Text>
                        </View>
                        <Text style={styles.pitchSectionText}>{currentStartupData.competitive_advantage}</Text>
                      </View>
                    )}
                  </View>
                )}

                {/* Business Model Section */}
                {currentStartupData.business_model && (
                  <View style={styles.pitchSection}>
                    <View style={styles.pitchSectionHeader}>
                      <FontAwesome name="briefcase" size={22} color="#000" />
                      <Text style={styles.pitchSectionTitle}>Business Model</Text>
                    </View>
                    <Text style={styles.pitchSectionText}>
                      {currentStartupData.business_model}
                    </Text>
                    
                    {currentStartupData.go_to_market && (
                      <View style={styles.subsection}>
                        <Text style={styles.subsectionTitle}>Go-to-Market Strategy</Text>
                        <Text style={styles.pitchSectionText}>{currentStartupData.go_to_market}</Text>
                      </View>
                    )}
                  </View>
                )}

                {/* Risk Factors Section */}
                {currentStartupData.risks && (
                  <View style={styles.pitchSection}>
                    <View style={styles.pitchSectionHeader}>
                      <FontAwesome name="exclamation-triangle" size={22} color="#000" />
                      <Text style={styles.pitchSectionTitle}>Risk Factors</Text>
                    </View>
                    <Text style={styles.pitchSectionText}>
                      {currentStartupData.risks}
                    </Text>
                  </View>
                )}

                {/* Exit Strategy Section */}
                {currentStartupData.exit_strategy && (
                  <View style={styles.pitchSection}>
                    <View style={styles.pitchSectionHeader}>
                      <FontAwesome name="sign-out" size={22} color="#000" />
                      <Text style={styles.pitchSectionTitle}>Exit Strategy</Text>
                    </View>
                    <Text style={styles.pitchSectionText}>
                      {currentStartupData.exit_strategy}
                    </Text>
                    
                    {(currentStartupData.exit_multiplier || currentStartupData.exit_probability) && (
                      <View style={styles.exitMetrics}>
                        {currentStartupData.exit_multiplier && (
                          <Text style={styles.exitMetricText}>
                            Potential multiple: {currentStartupData.exit_multiplier}x
                          </Text>
                        )}
                        {currentStartupData.exit_probability && (
                          <Text style={styles.exitMetricText}>
                            Exit probability: {currentStartupData.exit_probability}%
                          </Text>
                        )}
                      </View>
                    )}
                  </View>
                )}

                {/* Milestones Section */}
                {currentStartupData.milestones && (
                  <View style={styles.pitchSection}>
                    <View style={styles.pitchSectionHeader}>
                      <FontAwesome name="flag-checkered" size={22} color="#000" />
                      <Text style={styles.pitchSectionTitle}>Milestones</Text>
                    </View>
                    <Text style={styles.pitchSectionText}>
                      {currentStartupData.milestones}
                    </Text>
                  </View>
                )}

                {/* Funding Allocation Section */}
                <View style={styles.pitchSection}>
                  <View style={styles.pitchSectionHeader}>
                    <FontAwesome name="money" size={22} color="#000" />
                    <Text style={styles.pitchSectionTitle}>Funding Allocation</Text>
                  </View>
                  
                  {/* Improved funding allocation visualization */}
                  <View style={styles.fundingVisualization}>
                    {/* Horizontal bar chart for funding allocation */}
                    <View style={styles.horizontalBarChartContainer}>
                      <View style={styles.horizontalBarChart}>
                        <View 
                          style={[styles.horizontalBarProduct, { 
                            width: `${currentStartupData.funding_allocation?.product_development || 55}%` 
                          }]} 
                        />
                        <View 
                          style={[styles.horizontalBarMarketing, { 
                            width: `${currentStartupData.funding_allocation?.marketing || 30}%` 
                          }]} 
                        />
                        <View 
                          style={[styles.horizontalBarOperations, { 
                            width: `${currentStartupData.funding_allocation?.operations || 15}%` 
                          }]} 
                        />
                      </View>
                    </View>
                    
                    <View style={styles.fundingLegend}>
                      <View style={styles.legendItem}>
                        <View style={styles.legendColor1} />
                        <Text style={styles.legendText}>
                          Product Development ({currentStartupData.funding_allocation?.product_development || 55}%)
                        </Text>
                      </View>
                      <View style={styles.legendItem}>
                        <View style={styles.legendColor2} />
                        <Text style={styles.legendText}>
                          Marketing ({currentStartupData.funding_allocation?.marketing || 30}%)
                        </Text>
                      </View>
                      <View style={styles.legendItem}>
                        <View style={styles.legendColor3} />
                        <Text style={styles.legendText}>
                          Operations ({currentStartupData.funding_allocation?.operations || 15}%)
                        </Text>
                      </View>
                    </View>
                  </View>
                  
                  {/* How Funds Will Be Used Section */}
                  {currentStartupData.use_of_funds && (
                    <View style={styles.fundingUseSection}>
                      <Text style={styles.fundingUseTitle}>How Funds Will Be Used</Text>
                      <Text style={styles.pitchSectionText}>
                        {currentStartupData.use_of_funds}
                      </Text>
                    </View>
                  )}
                  
                  {/* Funding Use section - alternative if use_of_funds not available */}
                  {!currentStartupData.use_of_funds && currentStartupData.fundinguse && (
                    <View style={styles.fundingUseSection}>
                      <Text style={styles.fundingUseTitle}>How Funds Will Be Used</Text>
                      <Text style={styles.pitchSectionText}>
                        {currentStartupData.fundinguse}
                      </Text>
                    </View>
                  )}
                  
                  {/* Show closing hook if available */}
                  {currentStartupData.closing_hook && (
                    <View style={styles.closingHookSection}>
                      <Text style={styles.closingHookText}>
                        "{currentStartupData.closing_hook}"
                      </Text>
                    </View>
                  )}
                </View>

                {/* Investment Insights Section - Now with tagline */}
                <View style={styles.insightsSection}>
                  <View style={styles.pitchSectionHeader}>
                    <FontAwesome name="lightbulb-o" size={22} color="#000" />
                    <Text style={styles.pitchSectionTitle}>Investment Insights</Text>
                  </View>
                  
                  {/* Add tagline at the top of Investment Insights */}
                  {currentStartupData.tagline && (
                    <View style={[styles.taglineContainer, {marginBottom: 16}]}>
                      <Text style={styles.taglineText}>"{currentStartupData.tagline}"</Text>
                    </View>
                  )}
                  
                  <View style={styles.insightCardsContainer}>
                    {/* ROI Analysis */}
                    <View style={styles.insightCard}>
                      <Text style={styles.insightTitle}>ROI Potential</Text>
                      <Text style={styles.insightValue}>{currentStartupData.roi}%</Text>
                      <Text style={styles.insightDescription}>
                        {currentStartupData.roi > 40 ? 'High-risk, high-return opportunity' : 
                         currentStartupData.roi > 20 ? 'Balanced risk-return profile' : 'Conservative return profile'}
                      </Text>
                    </View>
                    
                    {/* Market Position */}
                    <View style={styles.insightCard}>
                      <Text style={styles.insightTitle}>Market Position</Text>
                      <Text style={styles.insightValue}>
                        {(currentStartupData.market_size && currentStartupData.market_size > 10000000000) ? 'Large' : 
                         (currentStartupData.market_size && currentStartupData.market_size > 1000000000) ? 'Medium' : 'Niche'}
                      </Text>
                      <Text style={styles.insightDescription}>
                        {currentStartupData.competition ? 'Competitive landscape requires differentiation' : 'Potential first-mover advantage'}
                      </Text>
                    </View>
                  </View>
                  
                  {/* Recommendation */}
                  <View style={styles.recommendationContainer}>
                    <Text style={styles.recommendationTitle}>Next Steps</Text>
                    <View style={styles.recommendationItem}>
                      <FontAwesome name="check-circle" size={18} color="#4CAF50" />
                      <Text style={styles.recommendationText}>Review detailed financials</Text>
                    </View>
                    <View style={styles.recommendationItem}>
                      <FontAwesome name="check-circle" size={18} color="#4CAF50" />
                      <Text style={styles.recommendationText}>Evaluate the team's expertise</Text>
                    </View>
                    <View style={styles.recommendationItem}>
                      <FontAwesome name="check-circle" size={18} color="#4CAF50" />
                      <Text style={styles.recommendationText}>Consider due diligence requirements</Text>
                    </View>
                  </View>
                </View>
              </ScrollView>
            </View>
          </Animated.View>
        )}
      </View>
      
      {/* Investment Modal */}
      {currentStartup && (
        <InvestmentModal
          visible={investModalVisible}
          onClose={() => setInvestModalVisible(false)}
          onSuccess={(investmentId) => {
            console.log(`Investment successful: ${investmentId}`);
            setInvestModalVisible(false);
          }}
          startup={currentStartup}
          userBalance={cashAvailable} // Use the actual user balance
        />
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  cardContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 0,
  },
  card: {
    width: SCREEN_WIDTH - 24,
    height: SCREEN_HEIGHT * 0.85, 
    borderRadius: 20,
    overflow: 'hidden',
    backgroundColor: THEME.darkBg,
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 6 },
        shadowOpacity: 0.15,
        shadowRadius: 10,
      },
      android: {
        elevation: 10,
      },
      web: {
        boxShadow: '0px 6px 15px rgba(0, 0, 0, 0.15)',
      }
    }),
    borderWidth: 0,
  },
  cardTopSection: {
    paddingHorizontal: 24,
    paddingVertical: 20,
    backgroundColor: THEME.darkBg,
  },
  headerTopRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 6,
  },
  appTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    flexShrink: 1,
  },
  appTitle: {
    color: THEME.textLight,
    fontSize: 16,
    fontWeight: 'bold',
    marginRight: 10,
  },
  balanceChip: {
    backgroundColor: '#4CAF50',
    borderRadius: 16,
    paddingHorizontal: 12,
    paddingVertical: 6,
    flexDirection: 'row',
    alignItems: 'center',
  },
  balanceText: {
    color: '#000',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 6,
  },
  titleDivider: {
    height: 2,
    backgroundColor: THEME.textLight,
    marginBottom: 12,
    marginTop: 8,
  },
  cardCompanyName: {
    color: THEME.textLight,
    fontWeight: 'bold',
    marginBottom: 6,
    fontSize: 32,
    flexWrap: 'wrap',
    lineHeight: 38,
  },
  valuationRow: {
    marginBottom: 12,
  },
  financialText: {
    color: 'rgba(255, 255, 255, 0.95)',
    fontSize: 18,
  },
  offerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  roiText: {
    fontWeight: 'bold',
    color: '#4eff91',
    fontSize: 22,
  },
  scrollableArea: {
    flex: 1,
  },
  scrollContent: {
    flex: 1,
    backgroundColor: THEME.darkBg,
  },
  scrollContentContainer: {
    paddingVertical: 16,
    paddingHorizontal: 16,
  },
  // Pitch card sections
  pitchSection: {
    marginBottom: 16, 
    backgroundColor: THEME.cardSectionBg,
    borderRadius: 8,
    padding: 16,
  },
  pitchSectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  pitchSectionTitle: {
    color: THEME.textDark,
    fontSize: 22,
    fontWeight: 'bold',
    marginLeft: 12,
  },
  pitchSectionText: {
    color: THEME.textDark,
    lineHeight: 24,
    fontSize: 17,
  },
  financialMetricsSimple: {
    marginBottom: 16,
  },
  metricText: {
    color: THEME.textDark,
    fontSize: 16,
    fontWeight: '500',
    marginBottom: 8,
  },
  fundingAllocation: {
    marginBottom: 16,
  },
  fundingText: {
    color: THEME.textDark,
    fontSize: 14,
    fontWeight: '500',
    marginTop: 8,
  },
  fundingBar: {
    height: 12,
    backgroundColor: '#E8E8E8',
    borderRadius: 6,
    overflow: 'hidden',
    marginBottom: 12,
  },
  fundingFill: {
    height: '100%',
    backgroundColor: THEME.primary,
  },
  infoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginVertical: 16,
  },
  industryBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
    backgroundColor: '#1E2A3A',
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 4,
    alignSelf: 'flex-start',
  },
  industryBadgeText: {
    color: '#fff',
    fontSize: 15,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  stageBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
    marginRight: 10,
  },
  riskBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
    backgroundColor: '#E34D4D',
  },
  badgeText: {
    color: THEME.textLight,
    fontSize: 15,
    fontWeight: 'bold',
  },
  makeOfferButton: {
    padding: 12,
    borderRadius: 8,
    backgroundColor: THEME.goldButton,
    alignItems: 'center',
    justifyContent: 'center',
    width: '45%',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  makeOfferText: {
    color: THEME.goldButtonText,
    fontSize: 17,
    fontWeight: 'bold',
  },
  
  // Animations and overlays
  investOverlay: {
    position: 'absolute',
    top: 50,
    right: 30,
    zIndex: 1000,
    transform: [{ rotate: '30deg' }],
  },
  passOverlay: {
    position: 'absolute',
    top: 50,
    left: 30,
    zIndex: 1000,
    transform: [{ rotate: '-30deg' }],
  },
  overlayText: {
    borderWidth: 4,
    borderColor: 'white',
    color: 'white',
    fontSize: 32,
    fontWeight: 'bold',
    padding: 10,
    borderRadius: 10,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
  },
  
  // Loading and empty states
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
  },
  loadingText: {
    marginTop: 16,
    color: '#666666',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 20,
  },
  emptyText: {
    color: '#666666',
    marginTop: 8,
    textAlign: 'center',
  },
  metricSeparator: {
    width: 1,
    height: 30,
    backgroundColor: '#E0E0E0',
    marginHorizontal: 15,
  },
  riskBadgeEnhanced: {
    paddingHorizontal: 14,
    paddingVertical: 8,
    borderRadius: 16,
    elevation: 2,
  },
  sectionRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionHalf: {
    flex: 1,
    marginHorizontal: 4,
  },
  marketSizeVisualization: {
    marginBottom: 16,
  },
  visualizationTitle: {
    color: THEME.textDark,
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  marketSizeValue: {
    color: THEME.textDark,
    fontSize: 20,
    fontWeight: 'bold',
  },
  marketSizeProgressBar: {
    height: 12,
    backgroundColor: '#E8E8E8',
    borderRadius: 6,
    overflow: 'hidden',
    marginBottom: 8,
  },
  marketSizeProgress: {
    height: '100%',
    backgroundColor: THEME.primary,
  },
  progressBarLabels: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 4,
  },
  progressBarLabel: {
    color: THEME.textDark,
    fontSize: 15,
    fontWeight: '500',
  },
  metricsVisual: {
    marginBottom: 16,
  },
  barChart: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  barChartColumn: {
    flexDirection: 'column',
    alignItems: 'center',
  },
  barChartBar: {
    height: 12,
    backgroundColor: '#E8E8E8',
    borderRadius: 6,
    overflow: 'hidden',
    marginBottom: 8,
  },
  barChartFill: {
    height: '100%',
    backgroundColor: THEME.primary,
  },
  barChartLabel: {
    color: THEME.textDark,
    fontSize: 14,
    fontWeight: '500',
    marginBottom: 4,
  },
  barChartValue: {
    color: THEME.textDark,
    fontSize: 16,
    fontWeight: 'bold',
  },
  keyMetrics: {
    marginBottom: 16,
  },
  keyMetricsTitle: {
    color: THEME.textDark,
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  subsection: {
    marginTop: 8,
  },
  subsectionTitle: {
    color: THEME.textDark,
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  fundingVisualization: {
    marginBottom: 16,
  },
  horizontalBarChartContainer: {
    marginVertical: 12,
  },
  horizontalBarChart: {
    height: 24,
    flexDirection: 'row',
    borderRadius: 12,
    overflow: 'hidden',
  },
  horizontalBarProduct: {
    height: '100%',
    backgroundColor: '#4CAF50',
  },
  horizontalBarMarketing: {
    height: '100%',
    backgroundColor: '#FF9800',
  },
  horizontalBarOperations: {
    height: '100%',
    backgroundColor: '#9C27B0',
  },
  fundingLegend: {
    marginTop: 12,
    flexDirection: 'column',
    marginBottom: 8,
  },
  legendItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 6,
  },
  legendColor1: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#4CAF50',
    marginRight: 8,
  },
  legendColor2: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#FF9800',
    marginRight: 8,
  },
  legendColor3: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#9C27B0',
    marginRight: 8,
  },
  legendText: {
    color: THEME.textDark,
    fontSize: 14,
    fontWeight: '500',
  },
  timeline: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 8,
  },
  timelineBar: {
    flex: 1,
    height: 2,
    backgroundColor: '#E8E8E8',
  },
  timelineItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16,
  },
  timelineDot: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: THEME.primary,
    marginRight: 8,
  },
  timelineText: {
    color: THEME.textDark,
    fontSize: 14,
    fontWeight: '500',
  },
  detailsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginTop: 8,
  },
  detailItem: {
    flexDirection: 'row',
    alignItems: 'center',
    width: '48%',
    marginBottom: 12,
    paddingHorizontal: 8,
    paddingVertical: 6,
    backgroundColor: 'rgba(0,0,0,0.03)',
    borderRadius: 6,
  },
  detailText: {
    marginLeft: 8,
    color: THEME.textDark,
    fontSize: 15,
  },
  exitMetrics: {
    marginTop: 12,
    padding: 10,
    backgroundColor: 'rgba(0,0,0,0.05)',
    borderRadius: 8,
  },
  exitMetricText: {
    fontSize: 14,
    fontWeight: '500',
    color: THEME.textDark,
    marginBottom: 4,
  },
  financialMetricRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
    paddingBottom: 6,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.05)',
  },
  metricLabel: {
    color: THEME.textDark,
    fontSize: 14,
    fontWeight: '500',
  },
  metricValue: {
    color: THEME.textDark,
    fontSize: 14,
    fontWeight: 'bold',
  },
  investmentDetails: {
    marginVertical: 16,
    padding: 12,
    backgroundColor: 'rgba(10, 102, 194, 0.1)',
    borderRadius: 8,
  },
  investmentDetailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  investmentDetailItem: {
    flex: 1,
    alignItems: 'center',
  },
  investmentDetailLabel: {
    color: THEME.textMedium,
    fontSize: 12,
    marginBottom: 4,
  },
  investmentDetailValue: {
    color: THEME.textDark,
    fontSize: 16,
    fontWeight: 'bold',
  },
  fundingAllocationTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: THEME.textDark,
    marginBottom: 8,
  },
  fundingUseSection: {
    marginTop: 16,
    padding: 12,
    backgroundColor: 'rgba(0,0,0,0.03)',
    borderRadius: 8,
  },
  fundingUseTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: THEME.textDark,
    marginBottom: 8,
  },
  closingHookSection: {
    marginTop: 16,
    padding: 12,
    backgroundColor: 'rgba(212, 175, 55, 0.1)',
    borderRadius: 8,
    borderLeftWidth: 4,
    borderLeftColor: THEME.goldButton,
  },
  closingHookText: {
    color: THEME.textDark,
    fontSize: 16,
    fontWeight: '500',
    fontStyle: 'italic',
  },
  badgesContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
    flexWrap: 'wrap',
  },
  companyHeaderRow: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  companyNameContainer: {
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'center',
    marginLeft: 16,
  },
  companyLogoContainer: {
    width: 70,
    height: 70,
    borderRadius: 35,
    backgroundColor: '#fff',
    justifyContent: 'center',
    alignItems: 'center',
    overflow: 'hidden',
    borderWidth: 3,
    borderColor: '#fff',
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 3 },
    shadowOpacity: 0.3,
    shadowRadius: 4.5,
  },
  defaultLogoContainer: {
    width: 70,
    height: 70,
    borderRadius: 35,
    backgroundColor: '#4CAF50',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#fff',
  },
  defaultLogoText: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
  },
  countryContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(30, 42, 58, 0.85)',
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 12,
    marginRight: 10,
    borderWidth: 1,
    borderColor: '#fff',
    overflow: 'hidden',
  },
  countryFlag: {
    width: 24,
    height: 16,
    marginRight: 8,
    borderRadius: 2,
  },
  countryFlagContainer: {
    marginRight: 8,
    width: 24,
    height: 16,
    borderRadius: 2,
    overflow: 'hidden',
  },
  country: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  taglineContainer: {
    marginBottom: 12,
    paddingVertical: 10,
    paddingHorizontal: 16,
    backgroundColor: '#F5F1E8',
    borderRadius: 8,
    borderLeftWidth: 3,
    borderLeftColor: THEME.primary,
  },
  taglineText: {
    fontSize: 18,
    fontStyle: 'italic',
    color: THEME.textDark,
    textAlign: 'center',
  },
  teamBackgroundContainer: {
    marginTop: 10,
    padding: 12,
    backgroundColor: 'rgba(10, 102, 194, 0.1)',
    borderRadius: 8,
  },
  teamBackgroundTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: THEME.textDark,
    marginBottom: 5,
  },
  advantageContainer: {
    marginTop: 12,
    padding: 12,
    backgroundColor: 'rgba(76, 175, 80, 0.1)',
    borderRadius: 8,
  },
  advantageTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: THEME.textDark,
    marginLeft: 8,
  },
  sectionSubheader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  insightsSection: {
    marginTop: 16,
    padding: 16,
    backgroundColor: '#fff',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  insightCardsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 12,
  },
  insightCard: {
    width: '48%',
    padding: 12,
    backgroundColor: '#F8F9FA',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  insightTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: THEME.textDark,
    marginBottom: 4,
  },
  insightValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: THEME.primary,
    marginBottom: 4,
  },
  insightDescription: {
    fontSize: 14,
    color: THEME.textMedium,
  },
  recommendationContainer: {
    marginTop: 16,
    padding: 12,
    backgroundColor: '#F5F7FA',
    borderRadius: 8,
  },
  recommendationTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: THEME.textDark,
    marginBottom: 10,
  },
  recommendationItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  recommendationText: {
    fontSize: 15,
    color: THEME.textDark,
    marginLeft: 8,
  },
  companyNameRow: {
    flexDirection: 'row',
    alignItems: 'center',
    flexWrap: 'wrap',
  },
  riskBadgeSmall: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FF5722',
    paddingHorizontal: 8,
    paddingVertical: 3,
    borderRadius: 12,
    marginRight: 8,
    marginBottom: 4,
  },
  riskBadgeSmallText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: 'bold',
    marginLeft: 4,
  },
  companyLogo: {
    width: '100%',
    height: '100%',
    backgroundColor: 'transparent',
    borderRadius: 35,
  },
  companyNameContainer: {
    flexDirection: 'column',
    marginBottom: 10,
  },
  badgesContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 5,
    marginBottom: 5,
  },
  countryFlag: {
    width: 24,
    height: 16,
    marginRight: 8,
    borderRadius: 2,
  },
  countryFlagContainer: {
    marginRight: 8,
    width: 24,
    height: 16,
    borderRadius: 2,
    overflow: 'hidden',
  },
}); 